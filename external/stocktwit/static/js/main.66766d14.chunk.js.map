{"version":3,"sources":["components/views/Results.jsx","components/views/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["ResultsView","props","size","count","Container","Row","data","messages","slice","map","tweet","index","Col","key","sm","md","lg","className","Card","style","marginBottom","bg","Body","Title","created_at","Text","body","SearchView","React","title","setTitle","responseData","setResponseData","errorMessage","setErrorMessage","setCount","handleSubmit","event","a","console","log","preventDefault","clearInterval","axios","post","then","response","catch","error","finally","Form","id","onSubmit","Group","Label","Control","type","placeholder","onChange","target","value","Button","variant","marginTop","paddingTop","color","symbol","min","max","Footer","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66766d14.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Row, Col, Card, Container } from \"react-bootstrap\";\r\n\r\nexport const ResultsView = props => {\r\n  const size = props.count;\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        {props.data && props.data.messages\r\n          ? props.data.messages.slice(0, size).map((tweet, index) => (\r\n              <Col key={index} sm={12} md={6} lg={4} className=\"elements\">\r\n                <Card style={{ marginBottom: \"20px\" }} bg=\"secondary\">\r\n                  <Card.Body>\r\n                    <Card.Title>{tweet.created_at}</Card.Title>\r\n                    <Card.Text>{tweet.body}</Card.Text>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            ))\r\n          : null}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  InputGroup\r\n} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { ResultsView } from \"./Results\";\r\n\r\nexport const SearchView = () => {\r\n  //State Management: Variables and Functions\r\n  const [title, setTitle] = React.useState(\"\");\r\n  const [responseData, setResponseData] = React.useState({});\r\n  const [errorMessage, setErrorMessage] = React.useState(false);\r\n  const [count, setCount] = React.useState(3);\r\n  const proxy = \"/api\";\r\n\r\n  //API GET Promise\r\n  const handleSubmit = async event => {\r\n    console.log(event);\r\n    event.preventDefault();\r\n    clearInterval();\r\n    await axios\r\n      .post(proxy, { title })\r\n      .then(function(response) {\r\n        setErrorMessage(false);\r\n        setResponseData(response.data);\r\n        console.log(response.data, responseData, title);\r\n        // refreshTweets(title);\r\n      })\r\n      .catch(function(error) {\r\n        setErrorMessage(true);\r\n        console.log(\r\n          error.response && error.response.data\r\n            ? error.response.data\r\n            : \"Unspecified Error\"\r\n        );\r\n      })\r\n      .finally(function() {});\r\n  };\r\n\r\n  function clearFields() {\r\n    setResponseData(null);\r\n  }\r\n\r\n  // Function fires an API call to refresh Tweet data every 10 seconds.\r\n  // Continued Development should include a function to stop the Interval.\r\n  // function refreshTweets(obj) {\r\n  //   console.log(\"Refresh Tweets:\", obj);\r\n  //   const interval = setInterval(() => {\r\n  //     axios({\r\n  //       method: \"get\",\r\n  //       url: `https://api.stocktwits.com/api/2/streams/symbol/${obj}.json`\r\n  //     }).then(function(response) {\r\n  //       setResponseData(response.data);\r\n  //     });\r\n  //   }, 10000);\r\n  // }\r\n\r\n  //Set the number of Tweets the user want to see by use of a number input\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <Form id=\"form-form\" onSubmit={handleSubmit}>\r\n            <Form.Group>\r\n              <Form.Label>US Stock Symbol</Form.Label>\r\n              <Form.Control\r\n                id=\"form-control\"\r\n                type=\"text\"\r\n                placeholder=\"eg: AAPL, BABA, BAC, etc...\"\r\n                onChange={event => setTitle(event.target.value)}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                {responseData && responseData.messages\r\n                  ? \"Please refresh using the button below to get the most recent tweets for your search.\"\r\n                  : \"Please search without using a $ symbol.\"}\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            {responseData && responseData.messages ? (\r\n              <Button variant=\"outline-primary\" type=\"submit\">\r\n                Refresh Search\r\n              </Button>\r\n            ) : (\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Submit\r\n              </Button>\r\n            )}\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n      {errorMessage ? (\r\n        <Row style={{ marginTop: \"20px\" }} className=\"alert alert-danger\">\r\n          There was an error on your submission, please try again.\r\n        </Row>\r\n      ) : null}\r\n      {responseData && responseData.messages ? (\r\n        <Card style={{ marginTop: \"20px\", paddingTop: \"20px\" }}>\r\n          <Card.Title style={{ color: \"green\" }}>\r\n            {`$${responseData.symbol.symbol}: ${responseData.symbol.title}  Showing ${count}/30 Tweets`}\r\n            <Row>\r\n              <Col md={3} />\r\n              <Col md={6}>\r\n                <Form.Control\r\n                  placeholder=\"eg: 0, 1, 2, 3, etc...\"\r\n                  id=\"form-control\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"30\"\r\n                  onChange={event => setCount(event.target.value)}\r\n                />\r\n                <Form.Text className=\"text-muted\">\r\n                  Adjust the number of tweets displayed below. The default value\r\n                  is 3.\r\n                </Form.Text>\r\n              </Col>\r\n              <Col md={3} />\r\n            </Row>\r\n            {console.log(responseData)}\r\n          </Card.Title>\r\n\r\n          <hr />\r\n          <Card.Body>\r\n            <ResultsView data={responseData} count={count} />\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <Button variant=\"outline-success\" onClick={() => clearFields()}>\r\n              Close {responseData.symbol.title}\r\n            </Button>\r\n          </Card.Footer>\r\n        </Card>\r\n      ) : null}\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { SearchView } from \"./components/views/Search\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container className=\"App\">\r\n      <Row className=\"App-header\">\r\n        <SearchView />\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n//React Bootstrap\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}